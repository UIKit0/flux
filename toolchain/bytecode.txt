Aether VM Bytecode Specification

Instruction Layout
==================
Every basic instruction is only one byte (eight bits) in length in 
order to maintain easy compatibility with foreign endiannesses. From 
the little end, the first two bits are the register selector, the 
second two bits are the magnitude selector, the next three bits are
the opcode, and the last bit indicates whether an argument should be
pushed onto the stack beforehand from the data following the instruction.

8       7       6       5       4       3       2       1       0
|       |       |       |       |       |       |       |       |
| push  |         opcode        |   magnitude   |   register    |

Magnitude Selector
==================
The magnitude selector determines the number of bytes that an 
instruction operates upon. It is the power of two number of bytes. On 
machines that are unable to operate upon specific magnitudes, a bignum 
library must be proveded to do the operations.

Register Selector
==================
The register selector chooses which register the instruction operates 
using. This does not necessarily mean it modifies or directly reads from 
this register; most things are done using the register as a pointer. The 
SP register is usually the implied target to push to.

00 - SP - Stack Pointer
01 - VP - Variable (Frame) Pointer
10 - DP - Data Pointer
11 - IP - Instruction Pointer

Opcode
==================
There are but sixteen basic opcodes, which are enough to do basic 
manipulation of data and branching. Full arithmetic and logical
operations are implemented as extensions (see extensions.txt). In 
general, operations take their arguments from and output their results 
to the stack pointed to by SP.

000: "rgt"
	- pushes a register onto the stack

001: "rst"
	- pops a value to a register	

010: "get"
	- pushes data from an offset from a register
	- takes one argument

011: "set"
	- writes to an offset from a register
	- takes two arguments

100: "cll"
	- pushes current IP and jumps to an address
	- takes one argument

101: "jmp"
	- jumps to an address
	- takes one argument

110: "jif"
	- jumps to an address if the second argument is nonzero
	- takes two arguments

111: "ext"
	- indicates the use of an extension opcode

Extension Opcode
================
If "ext" is used, the real opcode is read from the following byte. 
The other information is retained. A full listing of standard opcodes 
for the extension byte is in the "extension.txt" documentation file.
