Flux Programmer's Manual
Flux Library Documentation

Section 3: IPC

INTRODUCTION
	The IPC layer of the Flux library gives an interface to the low-level
	operations of Flux's message passing system. It provides functions to 
	allow asynchronous, synchronous, and event-producing messages or to be 
	sent, as well as to manipulate recieved packets.

TERMINOLOGY
	Flux implements what most would consider asynchronous message passing. 
	This means that pieces of data, messages, can be given to other processes, 
	and the thread that sent the message will continue running even if no 
	response has been recieved. Messages in Flux do not have to contain any 
	data, but if they do, the contained data is known as a "packet".

	Flux also implements (or, more precisely, is built upon) event driven IPC:
	when a message is recieved by a process, a new thread is created to
	immediately process that message. If the IPC subsystem has not been given a
	function to call on this event, it will instead place the message in the
	"message queue".

	When a message is recieved, the kernel spawns a new thread and places the
	message in the thread's "VPR", or "virtual packet register".

	A message has a field called it's "port index": this corresponds to the
	general type of action that should be performed on its reception. A port 
	index is an unsigned byte, so it is in the range 0 to 255. Different event 
	actionscan be specified per port, and the message queue is organized by 
	port.

API STRUCTURES
	NAME
		struct packet - FPP packet header structure

	SYNOPSIS
		struct packet {

			/* general information */
			uint16_t identity;
			uint16_t protocol;
	
			/* fragment information */
			uint16_t fragment_index;
			uint16_t fragment_count;
	
			/* data buffer information */
			uint32_t data_length;
			uint32_t data_offset;
	
			/* source routing information */
			uint32_t source_pid;
			uint64_t source_inode;

			/* target routing information */
			uint32_t target_pid;
			uint64_t target_inode;

			/* target file offset */
			uint64_t offset;
			uint64_t offset_ext;
	
		} __attribute__ ((packed));

	DESCRIPTION
		struct packet describes the header of a packet conforming to "FPP",
		the "Flux Packet Protocol". The region of memory pointed to by a
		variable of type struct packet* will always be aligned to a page 
		boundary and be a multiple of the page size: because of this, a
		special allocator is used for these packets.

		The <identity> field is a 16 bit value that represents the specific
		transaction being done, so it is not mixed up with another concurrent
		one with the same resource.

		The <protocol> field is always set to the value PACKET_PROTOCOL, which
		is the highest version that the current implementation of the IPC
		subsystem supports.

		The <fragment_*> fields show which fragment in a full transaction this
		packet is. For example, it could be packet 2 of 5 in a transaction
		that spans five 4096 byte packets.

		The <data_*> fields give information about the location and size of
		the data stored in the packet. <data_length> is the length of the data
		segment, and <data_offset> is the number of bytes from the beginning
		of the packet header at which the data segment starts.

		The <offset> field gives a byte offet into the target file, if any. If
		the size of the target file is greater than 2^64 bytes, then the
		offset_ext field can be used for overflow.

API FUNCTIONS

	NAME
		send - send a message

	SYNOPSIS
		#include <flux/ipc.h>

		int send(uint8_t port, uint32_t target, struct packet *packet);

	DESCRIPTION
		The send() function sends a message to the process with pid <target>, 
		and to the port index <port> within that process. If <packet> is 
		non-null, the packet pointed to by <packet> is sent as part of the 
		message. The virtual memory used by <packet> is freed if send() is 
		successful. send() will fail iff the process with pid <target> does 
		not exist or cannot spawn a new thread due to virtual or physical 
		memory constraints.

	RETURN VALUE
		send() returns 0 on success, and non-zero on failure.

	NAME
		setpacket - set the virtual packet register's packet

	SYNOPSIS
		#include <flux/ipc.h>
	
		void setpacket(struct packet *packet);

	DESCRPTION
		Used internally by send - do not call.

	NAME
		getpacket - get the virtual packet register's packet

	SYNOPSIS
		#include <flux/ipc.h>

		struct packet *getpacket(void);

	DESCRIPTION
		Used internally by recv - do not call.

	NAME
		
