diff a/driver/mouse/main.c b/driver/mouse/main.c	(rejected hunks)
@@ -1,16 +1,24 @@
-//todo: license here
+/*
+ * Copyright (C) 2011 Jaagup Rep√§n <jrepan@gmail.com>
+ * 
+ * Permission to use, copy, modify, and distribute this software for any
+ * purpose with or without fee is hereby granted, provided that the above
+ * copyright notice and this permission notice appear in all copies.
+ * 
+ * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
+ * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
+ * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
+ * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
+ * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
+ * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
+ * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ */
+
 #include <driver.h>
-#include <mutex.h>
 #include <proc.h>
 #include <stdlib.h>
-#include <stdio.h>
 #include <string.h>
 
-uint8_t bytes[3];
-size_t curbyte;
-uint8_t buttons;
-int x, y;
-bool mutex;
 uint64_t rp;
 
 void wait_signal() {
@@ -25,28 +33,6 @@ void command(uint8_t byte) {
 	while (inb(0x60) != 0xfa); // ACK
 }
 
-void mouse_irq(struct msg *msg) {
-	uint8_t byte = inb(0x60);
-	if (curbyte == 0 && !(byte & 0x8)) {
-		// Out of sync
-		return;
-	}
-	mutex_spin(&mutex);
-	bytes[curbyte++] = byte;
-	if (curbyte == 3) {
-		curbyte = 0;
-		buttons = bytes[0] & 0x7;
-		x += ((bytes[0] & 0x10) ? -1 : +1) * bytes[1];
-		y += ((bytes[0] & 0x20) ? -1 : +1) * bytes[2];
-		if (rp) {
-			char buf[32];
-			sprintf(buf, "m %u %u %u", buttons, x, y);
-			rcall(rp, buf);
-		}
-	}
-	mutex_free(&mutex);
-}
-
 char *mouse_rcall(struct vfs_obj *file, const char *args) {
 	uint32_t pid;
 	if (sscanf(args, "%i", &pid) != 1)
@@ -58,21 +44,18 @@ char *mouse_rcall(struct vfs_obj *file, const char *args) {
 int main()
 {
 	struct vfs_obj *root;
-	uint8_t status;
+	uint8_t bytes[3] = { 0, 0, 0};
+	size_t curbyte = 0;
+	char buffer[32];
+	bool first;
+	int buttons = 0, prevbuttons = 0;
+	int dx = 0, dy = 0;
 
-	command(0xa8); // enable aux. PS2
-	command(0xf6); // load default config
-	command(0xf4); // enable mouse
-
-	wait_signal();
-	outb(0x64, 0x20);
-	status = inb(0x60);
-	status |= 0x2; // enable IRQ12
-	status &= ~0x20; // enable mouse clock
-	wait_signal();
-	outb(0x64, 0x60);
-	wait_signal();
-	outb(0x60, status);
+	command(0xa8);  // enable aux. PS2
+	command(0xf6);  // load default config
+	command(0xf4);  // enable mouse
+	command(0xf3);  // set sample rate:
+	outb(0x60, 10); //    10 samples per second
 
 	root        = calloc(sizeof(struct vfs_obj), 1);
 	root->type  = RP_TYPE_FILE;
