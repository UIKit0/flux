Khaos Kernel Documentation
Init subsystem
==========================

Overview
==========================
The purpose of the kernel's init system is to, quite obviously, set up 
the kernel in such a way that it can operate normally. This is done only 
once, during the system startup. It is not to be confused with the Khaos 
init system, which runs in userspace as a loaded executable.

The Initrd
==========================
The initrd is used to load multiple important system components before 
the filesystem is ready. The initrd is a standard tar file, produced 
with any V7 or higher tar implementation. The required components are, 
and must be named: "libsys" and "init". All initial drivers may be in 
the directory "drivers", which is scanned by init later.

Init Memory Freeing
==========================
Because the init subsystem is used only once, it has been set up to 
remove itself just before entering user mode, releasing memory. Every 
init_* function is tagged with an ELF segment descriptor ".ttext", and 
many of the data structures with ".tdata". Both of these segments are 
grouped together by the linker script, and their bases page aligned. 
init_free(), the only remaining function, removes the now unused memory, 
which at the time of writing amounts to about 5 pages (20KB).

Function Documentation
==========================

Function: init(void *mboot_ptr, u32int mboot_magic)

	init() executes the list of init functions listed in the array 
init_list[] in order. It first checks to see if the bootloader is 
guaranteed to have done its job, but does not do much else.

Function: init_detect()

	init_detect() does a series of basic hardware checks. First, it 
figures out the amount of free higher memory available, which is needed 
by the memory subsystem. It then checks the processor's CPUID tag, which 
currently does not serve any real purpose. Last, it finds and indexes 
the initrd module for future use.

Function: init_mem()

	init_mem() completely prepares the memory subsystem for use. It 
creates "pool allocators" (see kernel/doc/lib.txt) for both the physical 
and virtual memory allocators. The page tables that could eventually be 
needed by the virtual memory allocator are preallocated, because it 
would be impossible to allocate them with a broken virtual memory 
allocator. It then identity maps the entirety of the memory range 
0x00000000 - 0x00400000 to 0xF8000000 - 0xF8400000, which contains the 
BIOS, kernel, and initrd. Last, it loads the page directory that was 
just created, by going back through lower memory for the last time.

Function: init_int()

	init_int() sets up all interrupt handling routines. It calls the 
function init_idt() to set up the x86's IDT (Interrupt Descriptor 
Table). It then remaps the IRQ interrupts to be in the range 32-47, 
linearly. It creates a table to register handlers for any numbered 
interrupt. It then creates a necessary TSS (Task State Segment) by 
calling init_tss() and sets up all of the system calls needed by 
userspace.

Function: init_task()

	
