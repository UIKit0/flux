Khaos Operating System v0.0
Design Overview
===========================

The goal of the Khaos project is to produce an operating system: 
one capable of great flexibilty. It's basic design philosophy follows but 
three rules (in order from most to least important):

1. Assume nothing
2. Impose nothing
3. Minimize effort

You may take from this what you wish, but from this I have come up with 
my own design. It consists of a series of layers, the lowest of which is 
the kernel. The kernel performs usual monolithic style duties, which are
almost exclusively memory management and task switching. It also redirects
any signals to the proper usermode tasks.

The next layer is a series of usermode, but very priviledged driver tasks.
These drivers are resposible for all I/O devices, and are dynamically spawned
to accommodate new devices. Filesystems are implemented as dynamic libraries
loaded into these processes, but the VFS is a separate task. Using the signal 
primitive, user tasks can request data from these drivers, which are also
responsible for implementing their own private I/O schedulers and caches.

The third layer is a sort of wrapper library, the libsys, not unlike the 
LibOSes used in exokernel designs. This library contains the default signal 
handlers, and also has a few signals that can only be directed to it. In this 
way, it can be almost entirely bypassed for additional control, except when 
there is a critical error. It's small amount of power is used to fix errors,
execute new programs, and if needed, terminate the current task. It is mapped
in all address spaces, and is read only, but can be changed to a different
version dynamically, to support multiple execution environments.
